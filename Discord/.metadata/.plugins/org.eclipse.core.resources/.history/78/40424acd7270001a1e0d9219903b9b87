package Commands;

import com.sedmelluq.discord.lavaplayer.player.AudioLoadResultHandler;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.player.DefaultAudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.source.AudioSourceManagers;
import com.sedmelluq.discord.lavaplayer.tools.FriendlyException;
import com.sedmelluq.discord.lavaplayer.track.AudioPlaylist;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import PackageAudio.AudioPlayerSendHandler;
import PackageAudio.TrackManager;
import PackageCommands.InterfaceCommand;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;

import java.util.AbstractMap;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class cmdPlay implements InterfaceCommand{

	private static final int PLAYLIST_LIMIT = 1000;
	private static Guild guildGlobal;
	private static final AudioPlayerManager MANAGER = new DefaultAudioPlayerManager();
	private static final Map<Guild, Map.Entry<AudioPlayer, TrackManager>> PLAYERS = new HashMap<Guild, Map.Entry<AudioPlayer,TrackManager>>();
	
	public cmdPlay() {
		AudioSourceManagers.registerRemoteSources(MANAGER);
	}
	
	private AudioPlayer createPlayer (Guild guildLocal) {
		AudioPlayer audioPlayer = MANAGER.createPlayer();
		TrackManager trackManager = new TrackManager(audioPlayer);
		audioPlayer.addListener(trackManager);
		
		guildGlobal.getAudioManager().setSendingHandler(new AudioPlayerSendHandler(audioPlayer));
		
		PLAYERS.put(guildLocal, new AbstractMap.SimpleEntry<>(audioPlayer, trackManager));
		
		return audioPlayer;
	}
	
	private boolean hasPlayer(Guild guildLocal) {
		return PLAYERS.containsKey(guildLocal);
	}
	
	private AudioPlayer getPlayer(Guild guildLocal) {
		if (hasPlayer(guildLocal))
			return PLAYERS.get(guildLocal).getKey();
		else
			return createPlayer(guildLocal);
	}
	
	private TrackManager getManager(Guild guildLocal) {
		return PLAYERS.get(guildLocal).getValue();
	}
	
	private void loadTrack(String identifier, Member author, Message msg) {
		Guild guild = author.getGuild();
		getPlayer(guild);
		
		MANAGER.setFrameBufferDuration(1000);
		MANAGER.loadItemOrdered(guild, identifier, new AudioLoadResultHandler() {
			
			@Override
			public void trackLoaded(AudioTrack track) {
				getManager(guild).queue(track, author);
			}
			
			@Override
			public void playlistLoaded(AudioPlaylist playlist) {
				for(int i=0; i < (playlist.getTracks().size()>PLAYLIST_LIMIT ? PLAYLIST_LIMIT : playlist.getTracks().size()); i++) {
					getManager(guild).queue(playlist.getTracks().get(i), author);
				}
			}
			
			@Override
			public void noMatches() {
				
			}
			
			@Override
			public void loadFailed(FriendlyException exception) {
				
			}
		});
	}
	
	@Override
	public boolean called(String[] args, MessageReceivedEvent event) {
		return false;
	}
	
	@Override
	public void action(String[] args, MessageReceivedEvent event) {
		
		String input = Arrays.stream(args).map(s -> " " + s).collect(Collectors.joining()).substring(1);
		
		if (!(input.startsWith("http://") || input.startsWith("https://")))
			input = "ytsearch: " + input;
		
		loadTrack(input, event.getMember(), event.getMessage());
		
	}
	@Override
	public void executed(boolean sucess, MessageReceivedEvent event) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public String help() {
		// TODO Auto-generated method stub
		return null;
	} 
	
		
}